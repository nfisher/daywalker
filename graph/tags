!_TAG_FILE_FORMAT	2
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Joel Stemmer	/stemmertech@gmail.com/
!_TAG_PROGRAM_NAME	gotags
!_TAG_PROGRAM_URL	https://github.com/jstemmer/gotags
!_TAG_PROGRAM_VERSION	1.3.0	/go1.4.2/
Add	graph.go	61;"	m	access:public	ctype:Digraph	line:61	signature:(name string)
AddArc	node.go	23;"	m	access:public	ctype:Node	line:23	signature:(to int, relationships )
Any	filters.go	5;"	f	access:public	line:5	signature:()	type:Filter
Arc	node.go	27;"	t	access:public	line:27	type:struct
Arcs	node.go	19;"	m	access:public	ctype:Node	line:19	signature:()	type:[]*Arc
Children	graph.go	29;"	m	access:public	ctype:Digraph	line:29	signature:(name string, filters )	type:[]*Node
Contains	graph.go	109;"	m	access:public	ctype:Digraph	line:109	signature:(name string)	type:bool
Digraph	graph.go	18;"	t	access:public	line:18	type:struct
Edge	graph.go	91;"	m	access:public	ctype:Digraph	line:91	signature:(name1 string, name2 string, relationships )
Filter	filters.go	3;"	t	access:public	line:3	type:func(*Node, *Arc, *Node) bool
HasRelationship	filters.go	11;"	f	access:public	line:11	signature:(relationship string)	type:Filter
Len	graph.go	23;"	m	access:public	ctype:Digraph	line:23	signature:()	type:int
Name	node.go	15;"	m	access:public	ctype:Node	line:15	signature:()	type:string
New	graph.go	8;"	f	access:public	ctype:Digraph	line:8	signature:()	type:*Digraph
NewNode	node.go	3;"	f	access:public	ctype:Node	line:3	signature:(name string)	type:*Node
Node	node.go	10;"	t	access:public	line:10	type:struct
NotFound	graph.go	6;"	c	access:public	line:6
Root	graph.go	5;"	c	access:public	line:5
Test_Graph_Children	graph_test.go	38;"	f	access:public	line:38	signature:(t *testing.T)
Test_Graph_Contains_Added_Node	graph_test.go	10;"	f	access:public	line:10	signature:(t *testing.T)
Test_Graph_Edge_should_add_absent_nodes	graph_test.go	81;"	f	access:public	line:81	signature:(t *testing.T)
Test_Graph_Filtered_Children	graph_test.go	68;"	f	access:public	line:68	signature:(t *testing.T)
Test_Graph_Len	graph_test.go	24;"	f	access:public	line:24	signature:(t *testing.T)
add	graph.go	78;"	m	access:private	ctype:Digraph	line:78	signature:(name string)	type:int
arcs	node.go	12;"	w	access:private	ctype:Node	line:12	type:[]*Arc
find	graph.go	68;"	m	access:private	ctype:Digraph	line:68	signature:(name string)	type:int
get	graph.go	57;"	m	access:private	ctype:Digraph	line:57	signature:(i int)	type:*Node
github.com/nfisher/daywalker/graph	graph_test.go	8;"	i	line:8
graph	filters.go	1;"	p	line:1
graph	graph.go	1;"	p	line:1
graph	node.go	1;"	p	line:1
graph_test	graph_test.go	1;"	p	line:1
name	node.go	11;"	w	access:private	ctype:Node	line:11	type:string
nodeIndex	node.go	28;"	w	access:private	ctype:Arc	line:28	type:int
nodes	graph.go	19;"	w	access:private	ctype:Digraph	line:19	type:[]*Node
reflect	graph_test.go	4;"	i	line:4
relationships	node.go	29;"	w	access:private	ctype:Arc	line:29	type:[]string
sync	graph.go	3;"	i	line:3
sync.RWMutex	graph.go	20;"	e	access:public	ctype:Digraph	line:20	type:sync.RWMutex
testing	graph_test.go	5;"	i	line:5
